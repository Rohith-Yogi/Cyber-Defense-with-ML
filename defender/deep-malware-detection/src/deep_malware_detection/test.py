import argparse
import os

import models
import torch
from dataset import make_loader_predict
from utils import load_model_from_ckp

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--device", type=str, default="cpu")
    parser.add_argument("--model", type=str, default="MalConvPlus")
    parser.add_argument("--path", type=str, default="assets/checkpoints/malconv_plus_50.pt")
    parser.add_argument("--input_path", type=str, default="data/dasmalwerk/0b1551c0bef2ec2f87a7e3d84be6a388c7ce52ca9d2c4f791939e41a3ecffd16.pickle")
    parser.add_argument("--embed_dim", type=int, default=8)
    parser.add_argument("--max_len", type=int, default=4096)
    parser.add_argument("--out_channels", type=int, default=128)
    parser.add_argument("--window_size", type=int, default=32)
    parser.add_argument("--dropout", type=float, default=0.5)
    args = parser.parse_args()
    return args


def main(args):
    model_cls = getattr(models, args.model)
    device = torch.device(args.device)
    model = model_cls(
        args.embed_dim, args.max_len, args.out_channels, args.window_size, args.dropout
    ).to(device)
    data = make_loader_predict(args.input_path)
    ans = load_model_from_ckp(model,args.path,data,args.device)
    print(ans)
    if(ans):
        print("Its MALWARE !!!")
    else:
        print("Its GOODWARE ???")

if __name__ == "__main__":
    args = get_args()
    main(args)